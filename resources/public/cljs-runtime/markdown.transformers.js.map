{"version":3,"sources":["markdown/transformers.cljc"],"mappings":"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","names":["markdown.transformers/heading?","text","type","cljs.core/every?","cljs.core.take.cljs$core$IFn$_invoke$arity$2","trimmed","clojure.string/trim","and__4174__auto__","cljs.core/not-empty","markdown.transformers/h1?","markdown.transformers/h2?","p__39392","map__39393","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markdown.transformers/empty-line","code","codeblock","state","or__4185__auto__","clojure.string/blank?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/superscript","tokens","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","buf","remaining","cljs.core/empty?","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/seq","cljs.core/second","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p__39407","map__39411","markdown.transformers/heading","next-line","heading-anchors","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","temp__5733__auto__","heading","markdown.common/make-heading","p__39421","map__39422","markdown.transformers/br","lists","cljs.core/take-last","cljs.core/not","cljs.core/str","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","p__39427","map__39430","markdown.transformers/autourl-transformer","frozen-strings","currently-frozen","cljs.core/volatile!","p1__39424#","clojure.string/replace","vec__39437","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","url","cljs.core/deref","markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/vreset!","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","markdown.transformers/autoemail-transformer","left-pad","s","G__39471","encoder","c","G__39473","G__39474","markdown.transformers/*formatter*","p1__39453#","encoded","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__39481","map__39482","markdown.transformers/set-line-state","inline-heading","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","markdown.transformers/clear-line-state","markdown.transformers/paragraph-text","last-line-empty?","p__39490","map__39492","markdown.transformers/open-paragraph","eof","temp","hr","blockquote","paragraph","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__39510","map__39511","markdown.transformers/close-paragraph","G__39521","markdown.transformers/paragraph","p__39522","map__39523","markdown.transformers/code","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","markdown.common/escape-code","clojure.string/replace-first","num-spaces","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p__39540","map__39541","markdown.transformers/codeblock","codeblock-end","indented-code","next-line-closes?","G__39543","clojure.string.split.cljs$core$IFn$_invoke$arity$2","vec__39544","lang","cljs.core/split-with","cljs.core/not=","formatter","markdown.transformers/hr","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__39553","map__39557","markdown.transformers/blockquote-1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p__39569","map__39570","markdown.transformers/blockquote-2","blockquote-start","blockquote-end","blockquote-paragraph","not-in-list","markdown.transformers/footer","footnotes","cljs.core/sorted-map","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__39577","vec__39578","id","label","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","G__39574","fexpr__39573","p1__39572#","markdown.transformers/parse-metadata-line","line","vec__39582","vec__39585","_","key","val","cljs.core/re-matches","next-val","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/lower-case","markdown.transformers/flatten-metadata","metadata","acc","remain","prev-key","vec__39591","data","cljs.core/sequential?","prev-val","cljs.core.get.cljs$core$IFn$_invoke$arity$3","postfix","norm-val","new-val","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","js/Error","markdown.transformers/parse-metadata-headers","lines-seq","cljs.core/string?","parsed","cljs.core/reduced","markdown.transformers/transformer-vector","markdown.common/inhibit","markdown.common/escape-inhibit-separator","markdown.common/escaped-chars","markdown.common/inline-code","markdown.links/image","markdown.links/image-reference-link","markdown.links/link","markdown.links/implicit-reference-link","markdown.links/reference-link","markdown.links/footnote-link","markdown.lists/li","markdown.common/italics","markdown.common/bold-italic","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.tables/table","markdown.common/thaw-strings","markdown.common/dashes"],"sourcesContent":["(ns markdown.transformers\n  (:require [clojure.string :as string]\n            [markdown.links\n             :refer [link\n                     image\n                     reference-link\n                     image-reference-link\n                     implicit-reference-link\n                     footnote-link]]\n            [markdown.lists :refer [li]]\n            [markdown.tables :refer [table]]\n            [markdown.common\n             :refer\n             [escape-code\n              escaped-chars\n              freeze-string\n              separator\n              thaw-strings\n              strong\n              bold\n              bold-italic\n              em\n              italics\n              strikethrough\n              inline-code\n              escape-inhibit-separator\n              inhibit\n              make-heading\n              dashes]]))\n\n(declare ^:dynamic *formatter*)\n\n(defn heading? [text type]\n  (when-not (every? #{\\space} (take 4 text))\n    (let [trimmed (if text (string/trim text))]\n      (and (not-empty trimmed) (every? #{type} trimmed)))))\n\n(defn h1? [text]\n  (heading? text \\=))\n\n(defn h2? [text]\n  (heading? text \\-))\n\n(defn empty-line [text {:keys [code codeblock] :as state}]\n  (if (or code codeblock)\n    [text state]\n    [(if (or (h1? text) (h2? text)) \"\" text)\n     (if (string/blank? text) (dissoc state :hr :heading) state)]))\n\n(defn superscript [text state]\n  (if (:code state)\n    [text state]\n    (let [tokens (partition-by (partial contains? #{\\^ \\space}) text)]\n      (loop [buf       []\n             remaining tokens]\n        (cond\n          (empty? remaining)\n          [(string/join buf) state]\n\n          (= (first remaining) [\\^])\n          (recur (into buf (concat (seq \"<sup>\") (second remaining) (seq \"</sup>\")))\n                 (drop 2 remaining))\n\n          :default\n          (recur (into buf (first remaining)) (rest remaining)))))))\n\n(defn heading [text {:keys [buf next-line code codeblock heading-anchors] :as state}]\n  (cond\n    (or codeblock code)\n    [text state]\n\n    (h1? (or buf next-line))\n    [(str \"<h1>\" text \"</h1>\") (assoc state :heading true)]\n\n    (h2? (or buf next-line))\n    [(str \"<h2>\" text \"</h2>\") (assoc state :heading true)]\n\n    :else\n    (if-let [heading (make-heading text heading-anchors)]\n      [heading (assoc state :inline-heading true)]\n      [text state])))\n\n(defn br [text {:keys [code lists] :as state}]\n  [(if (and (= [\\space \\space] (take-last 2 text))\n            (not (or code lists)))\n     (str (apply str (drop-last 2 text)) \"<br />\")\n     text)\n   state])\n\n(defn autourl-transformer [text {:keys [code frozen-strings] :as state}]\n  (if code\n    [text state]\n    (let [currently-frozen (volatile! {:frozen-strings frozen-strings})]\n      [(string/replace\n         text\n         #\"<https?://[-A-Za-z0-9+&@#/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#/%=~_()|]>\"\n         #(let [[url frozen-strings] (freeze-string (subs % 1 (dec (count %))) @currently-frozen)]\n            (vreset! currently-frozen frozen-strings)\n            (str \"<a href=\\\"\" url \"\\\">\" url \"</a>\")))\n       (merge state @currently-frozen)])))\n\n(defn autoemail-transformer [text state]\n  (let [left-pad (fn [s]\n                   (cond->> s\n                     (= 1 (count s)) (str \"0\")))\n        encoder (if (:clojurescript state)\n                  (fn [c] (str \"&#x\" (-> c (.charCodeAt 0) (.toString 16) left-pad) \";\"))\n                  (fn [c] (*formatter* \"&#x%02x;\" (int c))))]\n    [(if (or (:code state) (:codeblock state))\n       text\n       (string/replace\n        text\n        #\"<[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,4}>\"\n        #(let [encoded (->> (subs % 1 (dec (count %)))\n                            (map encoder)\n                            (apply str))]\n           (str \"<a href=\\\"mailto:\" encoded \"\\\">\" encoded \"</a>\"))))\n     state]))\n\n(defn set-line-state [text {:keys [inline-heading] :as state}]\n  [text\n   (-> state\n       (dissoc :inline-heading)\n       (assoc-in [:temp :inline-heading] inline-heading))])\n\n(defn clear-line-state [text state]\n  [text (dissoc state :temp)])\n\n(defn paragraph-text [last-line-empty? text]\n  (if (and (not last-line-empty?) (not-empty text))\n    (str \" \" text)\n    text))\n\n(defn open-paragraph\n  [text {:keys [eof heading inline-heading temp hr code lists blockquote paragraph last-line-empty?] :as state}]\n  (cond\n    (and paragraph lists)\n    [(str \"</p>\" text) (dissoc state :paragraph)]\n\n    (or heading inline-heading hr code lists blockquote)\n    [text state]\n\n    paragraph\n    (if (or eof (empty? (string/trim text)))\n      [(str (paragraph-text last-line-empty? text) \"</p>\") (dissoc state :paragraph)]\n      [(paragraph-text last-line-empty? text) state])\n\n    (and (not eof) (not (string/blank? text)) (or (:inline-heading temp) last-line-empty?))\n    [(str \"<p>\" text) (assoc state :paragraph true :last-line-empty? false)]\n\n    :default\n    [text state]))\n\n(defn close-paragraph [text {:keys [next-line paragraph] :as state}]\n  (if (and paragraph (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim))))\n    [(str text \"</p>\") (dissoc state :paragraph)]\n    [text state]))\n\n(defn paragraph [text state]\n  (apply close-paragraph (open-paragraph text state)))\n\n(defn code [text {:keys [eof lists code codeblock] :as state}]\n  (cond\n    (or lists codeblock)\n    [text state]\n\n    code\n    (if (or eof (not= \"    \" (string/join (take 4 text))))\n      [(str \"</code></pre>\" text) (dissoc state :indented-code :code :last-line-empty?)]\n      [(str \"\\n\" (escape-code (string/replace-first text #\"    \" \"\"))) state])\n\n    (empty? (string/trim text))\n    [text state]\n\n    :default\n    (let [num-spaces (count (take-while (partial = \\space) text))]\n      (if (> num-spaces 3)\n        [(str \"<pre><code>\" (escape-code (string/replace-first text #\"    \" \"\")))\n         (assoc state :code true :indented-code true)]\n        [text state]))))\n\n(defn codeblock [text {:keys [codeblock codeblock-end indented-code next-line lists] :as state}]\n  (let [trimmed (string/trim text)\n        next-line-closes? (= [\\` \\` \\`] (take-last 3 (some-> next-line string/trim)))]\n    (cond\n      (and lists codeblock-end)\n      [\"\" (dissoc state :code :codeblock :codeblock-end)]\n\n      codeblock-end\n      [text (-> state\n                (assoc :last-line-empty? true)\n                (dissoc :code :codeblock :codeblock-end))]\n\n      (and next-line-closes? codeblock)\n      [(str (escape-code (str text \"\\n\" (apply str (first (string/split next-line #\"```\"))))) \"</code></pre>\")\n       (assoc state :skip-next-line? (not lists)\n                    :codeblock-end true\n                    :last-line-empty? (not lists))]\n\n      (and\n        (not indented-code)\n        (= [\\` \\` \\`] (take 3 trimmed)))\n      (let [[lang code] (split-with (partial not= \\newline) (drop 3 trimmed))\n            lang      (string/trim (string/join lang))\n            s         (apply str (rest code))\n            formatter (:code-style state)]\n        [(str \"<pre><code\" (if (not-empty lang)\n                             (str \" \"\n                                  (if formatter\n                                    (formatter lang)\n                                    (str \"class=\\\"\" (string/join lang) \"\\\"\")))) \">\"\n              (escape-code (if (empty? s) s (str s \"\\n\")))\n              (when next-line-closes? \"</code></pre>\"))\n         (if next-line-closes?\n           (assoc state :codeblock-end true :skip-next-line? true)\n           (assoc state :code true :codeblock true))])\n\n      codeblock\n      [(str (escape-code text) \"\\n\") state]\n\n      :default\n      [text state])))\n\n(defn hr [text state]\n  (if (:code state)\n    [text state]\n    (if (and\n          (or (empty? (drop-while #{\\* \\space} text))\n              (empty? (drop-while #{\\- \\space} text))\n              (empty? (drop-while #{\\_ \\space} text)))\n          (> (count (remove #{\\space} text)) 2))\n      [(str \"<hr/>\") (assoc state :hr true)]\n      [text state])))\n\n(defn blockquote-1\n  \"Check for blockquotes and signal to blockquote-2 function with\n  states blockquote-start and blockquote-end so that tags can be added.\n  This approach enables lists to be included in blockquotes.\"\n  [text {:keys [eof code codeblock lists] :as state}]\n  (let [trimmed (string/trim text)]\n    (cond\n      (or code codeblock)\n      [text state]\n\n      (:blockquote state)\n      (cond (or eof (empty? trimmed))\n            [text (assoc state :blockquote-end true :blockquote false)]\n\n            (= \">\" trimmed)\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<p>\") (assoc state :blockquote-paragraph true)]\n\n            (and (>= (count trimmed) 2) (= \">-\" (subs trimmed 0 2)))\n            [(str (when (:blockquote-paragraph state) \"</p>\") \"<footer>\" (subs text 2) \"</footer>\") (assoc state :blockquote-paragraph false)]\n\n            (= \">\" (subs trimmed 0 1))\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") (subs text 1) \" \") (assoc state :blockquote-paragraph true)]\n\n            :default\n            [(str (when-not (:blockquote-paragraph state) \"<p>\") text \" \") (assoc state :blockquote-paragraph true)])\n\n      :default\n      (if (= \\> (first text))\n        [(str (string/join (rest text)) \" \")\n         (assoc state :blockquote-start true :blockquote true :blockquote-paragraph true)]\n        [text state]))))\n\n(defn blockquote-2\n  \"Check for change in blockquote states and add start or end tags.\n  Closing a blockquote with a list in it is a bit more complex,\n  as the list is not closed until the following blank line.\"\n  [text {:keys [blockquote-start blockquote-end blockquote-paragraph lists] :as state}]\n  (let [not-in-list (or (not lists) (empty? lists))]\n    (cond blockquote-start\n          [(str \"<blockquote><p>\" text)\n           (dissoc state :blockquote-start)]\n\n          (and blockquote-end not-in-list)\n          [(str text (when blockquote-paragraph \"</p>\") \"</blockquote>\")\n           (dissoc state :blockquote :blockquote-paragraph :blockquote-end )]\n\n          :default\n          [text state])))\n\n(defn footer [footnotes]\n  (if (empty? (:processed footnotes))\n    \"\"\n    (->> (:processed footnotes)\n         (into (sorted-map))\n         (reduce\n           (fn [footnotes [id label]]\n             (str footnotes\n                  \"<li id='fn-\" id \"'>\"\n                  (apply str (interpose \" \" label))\n                  \"<a href='#fnref\" id \"'>&#8617;</a></li>\"))\n           \"\")\n         (#(str \"<ol class='footnotes'>\" % \"</ol>\")))))\n\n(defn parse-metadata-line\n  \"Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil.\"\n  [line]\n  (when line\n    (let [[_ key val] (re-matches #\"^([0-9A-Za-z_-]*):(.*)$\" line)\n          [_ next-val] (re-matches #\"^    (.*)$\" line)]\n      (when (not= (string/trim line) \"\")\n        (cond\n          key [(keyword (string/lower-case key)) val]\n          next-val line)))))\n\n(defn flatten-metadata\n  \"Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil.\"\n  [metadata]\n  (when (pos? (count metadata))\n    (loop [acc      {}\n           remain   metadata\n           prev-key nil]\n      (if (not (empty? remain))\n        (let [data     (first remain)\n              [key val] (if (sequential? data) data [prev-key data])\n              prev-val (get acc key [])\n              postfix  (if (= [\\space \\space] (take-last 2 val)) \"\\n\" \"\")\n              norm-val (str (string/trim val) postfix)\n              new-val  (if-not (empty? norm-val)\n                         (conj prev-val norm-val)\n                         prev-val)]\n          (recur (merge acc {key new-val}) (rest remain) key))\n        acc))))\n\n(defn parse-metadata-headers\n  \"Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists.\"\n  [lines-seq]\n  {:pre [(sequential? lines-seq)\n         (every? string? lines-seq)]}\n  (reduce\n    (fn [acc line]\n      (if-let [parsed (parse-metadata-line line)]\n        (conj acc parsed)\n        (reduced (flatten-metadata acc))))\n    [] lines-seq))\n\n(def transformer-vector\n  [set-line-state\n   empty-line\n   inhibit\n   escape-inhibit-separator\n   code\n   codeblock\n   escaped-chars\n   inline-code\n   autoemail-transformer\n   autourl-transformer\n   image\n   image-reference-link\n   link\n   implicit-reference-link\n   reference-link\n   footnote-link\n   hr\n   blockquote-1\n   li\n   heading\n   blockquote-2\n   italics\n   bold-italic\n   em\n   strong\n   bold\n   strikethrough\n   superscript\n   table\n   paragraph\n   br\n   thaw-strings\n   dashes\n   clear-line-state])\n"]}