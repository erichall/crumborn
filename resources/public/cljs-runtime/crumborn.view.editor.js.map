{"version":3,"sources":["crumborn/view/editor.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","crumborn.view.editor/get-lines","buffer","clojure.string/split-lines","js/crumborn","js/crumborn.view","js/crumborn.view.editor","js/crumborn.view.editor.state-atom","crumborn.view.editor/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","crumborn.view.editor/initial-state","cljs.core/deref","cljs.core/reset!","p__30407","map__30408","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","crumborn.view.editor/editor-width","styles","crumborn.view.editor/listen","element","type","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","crumborn.interop.setup_listener_BANG_.cljs$core$IFn$_invoke$arity$3","evt","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","p__30410","map__30411","crumborn.view.editor/get-row","row-number","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","crumborn.view.editor/get-row-length","state","cljs.core/count","p__30413","map__30414","js/Error","%","crumborn.view.editor/get-row-width","char-width","row-num","cljs.core/int?","crumborn.interop/not-nan?","cljs.core/double?","p__30416","map__30417","crumborn.view.editor/count-rows","crumborn.view.editor/row-id","p__30419","map__30420","crumborn.view.editor/row-heights","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__30422","vec__30423","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","i","row","map__30426","line-height","editor-width","span","G__30428","G__30429","Math/max","G__30430","Math/ceil","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","r","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$1","p__30431","map__30432","crumborn.view.editor/y->row","y","a","cljs.core/some","p__30434","map__30435","span-start","span-end","s","b","prev","cur","G__30437","Math/abs","G__30438","p__30439","map__30440","crumborn.view.editor/clamp-to-chars","value","chars","x__4276__auto__","y__4277__auto__","G__30442","Math/round","p__30443","map__30444","crumborn.view.editor/clamp-cursor","x","mouse","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__30446","map__30447","crumborn.view.editor/get-active-row","cursor","p__30450","map__30451","crumborn.view.editor/inc-cursor-x","p1__30449#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__30454","map__30455","crumborn.view.editor/dec-cursor-x","active-line","p1__30453#","x__4273__auto__","y__4274__auto__","crumborn.view.editor/set-cursor-end-of-row","crumborn.view.editor/set-cursor","cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","p__30457","map__30458","crumborn.view.editor/set-cursor-start","p__30460","map__30461","crumborn.view.editor/x->char-pos","crumborn.view.editor/dec-cursor-y","p__30464","map__30465","crumborn.view.editor/inc-cursor-y","p1__30463#","crumborn.view.editor/str-insert","values__8921__auto__","cljs.core/List","result__8922__auto__","cljs.test/do-report","cljs.core/cons","t__8952__auto__","e30467","cljs.core/=","c","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","crumborn.view.editor/remove-char-at","e30468","crumborn.view.editor/remove-last-char","e30469","p__30470","map__30471","crumborn.view.editor/row-overflow?","e30473","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","p__30474","map__30475","crumborn.view.editor/remove-row","e30477","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","p__30478","map__30479","crumborn.view.editor/insert-row-at","e30481","new-row","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p__30482","map__30483","crumborn.view.editor/cursor-end-of-row?","crumborn.view.editor/rest-of-row","crumborn.view.editor/first-of-row","crumborn.view.editor/last-char","cljs.core/last","p__30485","map__30486","crumborn.view.editor/process-char","key","cursor-x","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","pos","overflow?","cljs.core/assoc-in","crumborn.view.editor/empty-row?","cljs.core/empty?","p__30489","map__30490","crumborn.view.editor/process-backspace","p1__30488#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p__30492","map__30493","crumborn.view.editor/process-key-down","pred__30495","expr__30496","G__30498","G__30499","G__30500","G__30501","G__30502","G__30503","G__30504","G__30505","G__30506","G__30507","G__30508","G__30509","G__30510","G__30511","G__30512","G__30513","cljs.core/re-matches","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","p__30514","map__30515","crumborn.view.editor/process-key-up","cljs.core/disj","p__30517","map__30518","crumborn.view.editor/process-key","key-type","data","pred__30520","expr__30521","G__30523","G__30524","G__30525","G__30526","js/console.warn","crumborn.view.editor/get-dom-el","id","crumborn.interop/get-element-by-id","crumborn.view.editor/get-relative-mouse-cords","js-evt","el","map__30527","left","top","crumborn.interop/get-bounding-client-rect","crumborn.interop/mouse-x","crumborn.interop/mouse-y","crumborn.view.editor/clamp-to-row","e30530","e30531","e30532","row-height","G__30529","Math/floor","p__30533","map__30534","crumborn.view.editor/in-editor?","p__30536","map__30537","crumborn.view.editor/process-mouse-down","p__30539","map__30540","crumborn.view.editor/process-mouse-up","crumborn.view.editor/ge-sub","crumborn.view.editor/selection-top-dist","crumborn.view.editor/selection-x->end","full-width","crumborn.view.editor/selection-zero->x","crumborn.view.editor/selection-zero->end","width","crumborn.view.editor/select-rows-between","fixed-row","moving-row","fixed-row-width","moving-row-width","fixed-x","moving-x","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__30543","p1__30542#","p__30544","map__30545","crumborn.view.editor/process-mouse-move","p__30547","map__30548","crumborn.view.editor/handle-mouse-event","mouse-type","pred__30550","expr__30551","G__30553","G__30554","G__30555","G__30556","G__30557","G__30558","cljs.core/type","crumborn.view.editor/handle-event!","name","cljs.core/Keyword","pred__30559","expr__30560","G__30562","G__30563","G__30564","G__30565","G__30566","G__30567","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","new-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","crumborn.view.editor/editor","trigger-event","reagent.core/create-class","G__30568","G__30569","chans","cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1","crumborn.interop/document","c__25761__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__25762__auto__","switch__25723__auto__","state_30604","state_val_30605","inst_30574","inst_30586","inst_30587","inst_30588","cljs.core/PersistentArrayMap","inst_30589","cljs.core/PersistentHashSet","inst_30590","statearr-30606","statearr-30607","statearr-30608","statearr-30609","inst_30572","inst_30573","inst_30575","inst_30576","inst_30577","inst_30578","statearr-30610","statearr-30611","statearr-30612","statearr-30613","inst_30602","cljs.core.async.impl.ioc-helpers/return-chan","cljs.core.async.impl.ioc-helpers/take!","statearr-30614","inst_30580","inst_30581","inst_30582","cljs.core/PersistentHashMap","inst_30583","G__30615","G__30616","statearr-30617","inst_30599","statearr-30618","statearr-30619","inst_30592","inst_30593","inst_30594","inst_30595","inst_30596","G__30620","G__30621","statearr-30622","statearr-30623","state-machine__25724__auto__","ret-value__25725__auto__","result__25726__auto__","cljs.core/keyword-identical?","e30624","js/Object","ex__25727__auto__","statearr-30625","cljs.core.async.impl.ioc-helpers/process-exception","state__25763__auto__","statearr-30626","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/contains?","map__30627","selections","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","line","p__30629","map__30630"],"sourcesContent":["(ns crumborn.view.editor\n  ;(:require-macros [cljs.core.async.macros :refer [go go-loop]])\n  (:require\n    [reagent.core :as r]\n    [clojure.string :as s]\n    [cljs.core.async :as async]\n    [crumborn.interop :as interop]\n    [cljs.test :refer [deftest is]]))\n\n(enable-console-print!)\n;; TODO\n;; []   handle when rows expands to multiple rows, can no longer use 21px as height... :~>\n;; [X]  handle selections for empty rows\n;; [X]  remove fetching row width and chars directly from the dom cus it messes up when removing chars..\n;;        we should fetch it from the buffer instead and keep a fixed char-width as a style maybe??\n;; []   Remove active-line and just get-it from cursor y pos?\n\n(defn get-lines\n  [buffer]\n  (s/split-lines buffer))\n\n(defonce state-atom (r/atom nil))\n(def initial-state\n  {:buffer      (get-lines \"a\\nThis is a editor\\nwith text!\\na\\n.\\n\\n\\nhejsan\\n\")\n   :selection   []\n   :keys-down   #{}\n   :cursor      {:x        0\n                 :x-screen 0\n                 :y        0\n                 :y-screen 0}\n   :mouse       {:is-down false\n                 :start   {:x 0 :x-screen 0 :y 0 :y-screen 0}\n                 :end     {:x 0 :x-screen 0 :y 0 :y-screen 0}}\n   :active-line 0\n   :editable    true\n   :char-width  nil                                         ; must measure this......\n   :styles      {:line-height   21                          ; https://grtcalculator.com/\n                 :font-size     12\n                 :editor-width  500\n                 :editor-height 900}\n   })\n\n(when-not @state-atom\n  (reset! state-atom initial-state))\n\n(defn editor-width\n  [{:keys [styles]}]\n  (:editor-width styles))\n\n(defn- listen\n  [element type]\n  (let [out (async/chan)]\n    (interop/setup-listener! element type (fn [evt] (async/put! out evt)))\n    out))\n\n(defn get-row\n  [{:keys [buffer]} row-number]\n  (nth buffer row-number))\n\n(defn get-row-length\n  [state row-number]\n  (count (get-row state row-number)))\n\n(defn get-row-width\n  [{:keys [char-width] :as state} row-num]\n  {:pre  [(int? row-num)]\n   :post [(interop/not-nan? %) (double? %)]}\n  (* (get-row-length state row-num) char-width))\n\n(defn count-rows\n  [{:keys [buffer]}]\n  (count buffer))\n\n(defn row-id\n  [row-number]\n  (str \"row-\" row-number))\n\n(defn row-heights\n  [{:keys [char-width buffer styles]}]\n  (reduce (fn [acc [i row]]\n            ;; span is the number of how many rows this row spans, if it's exceeds width it will span another row\n            (let [{:keys [line-height editor-width]} styles\n                  span (Math/max 1                          ;; 1 for empty rows\n                                 (Math/ceil (/\n                                              (* char-width (count row))\n                                              editor-width  ;; either take this or query it from the dom?\n                                              )))]\n              (conj acc {:row          i\n                         :span         span\n                         :inner-lines  (map (fn [r] (* r i line-height)) (range 1 (inc span)))\n                         :total-height (* span line-height)\n                         :span-start   (* i line-height)\n                         :span-end     (+ (* i line-height)\n                                          (* span line-height))}\n                    ))) [] (map vector (range (count buffer)) buffer)))\n\n;; TODO\n(defn y->row\n  [{:keys [buffer styles] :as state} y]\n  (let [a (->> (row-heights state)\n               (some (fn [{:keys [span-start span-end] :as s}]\n                       (when (and (>= y span-start) (< y span-end))\n                         s)))\n               ;(Math/min (dec (count buffer)))\n               )\n        b (reduce (fn [prev cur]\n                    (if (< (Math/abs (- cur y)) (Math/abs (- prev y)))\n                      cur\n                      prev\n                      )) -1 (:inner-lines a))]\n    (:row a)\n    ))\n\n(defn clamp-to-chars\n  [{:keys [char-width] :as state} row-number value]\n  {:pre  [(interop/not-nan? value)]\n   :post [(double? %) (interop/not-nan? %)]}\n  (let [chars (get-row-length state row-number)]\n    (* char-width (min chars (Math/round (/ value char-width))))))\n\n(defn clamp-cursor\n  \"Clamp x-position of cursor position between chars\"\n  [state {:keys [x y] :as mouse}]\n  (assoc mouse :x (clamp-to-chars state (y->row state y) x)))\n\n\n(defn get-active-row\n  [{:keys [cursor] :as state}]\n  (get-row state (y->row state (:y cursor))))\n\n(defn inc-cursor-x\n  \"Increase cursor position x with one char\"\n  [{:keys [char-width] :as state}]\n  (update-in state [:cursor :x] #(min (+ char-width %))))\n\n(defn dec-cursor-x\n  \"Decrease cursor position x with one char\"\n  [{:keys [cursor char-width] :as state}]\n  (let [active-line (y->row state (:y cursor))]\n    (update-in state [:cursor :x] #(max 0 (->> (- % char-width)\n                                               (clamp-to-chars state active-line))))))\n\n(defn set-cursor-end-of-row\n  [state row-number]\n  {:pre [(>= row-number 0)]}\n  (->> (get-row-width state row-number)\n       (clamp-to-chars state row-number)))\n\n(defn set-cursor\n  [state x y]\n  (update-in state [:cursor] assoc :x x :y y))\n\n(defn set-cursor-start\n  [{:keys [cursor] :as state}]\n  (set-cursor state 0 (:y cursor)))\n\n(defn x->char-pos\n  [{:keys [char-width]} x]\n  (/ x char-width))\n\n;; TODO fix state mod here...\n(defn dec-cursor-y\n  [y line-height]\n  (if (<= y line-height)\n    y\n    (- y line-height)))\n\n(defn inc-cursor-y\n  [{:keys [styles] :as state}]\n  (update-in state [:cursor :y] #(+ % (:line-height styles))))\n\n(defn str-insert\n  {:test (fn [] (is (= (str-insert \"hej\" \"B\" 1) \"hBej\")))}\n  [s c i]\n  (str (subs s 0 i) c (subs s i)))\n\n(defn remove-char-at\n  {:test (fn [] (is (= (remove-char-at \"hej\" 0) \"ej\")))}\n  [s i]\n  (str (subs s 0 i) (subs s (+ 1 i))))\n\n(defn remove-last-char\n  {:test (fn [] (is (= (remove-last-char \"hej\") \"he\")))}\n  [s]\n  (remove-char-at s (dec (count s))))\n\n(defn row-overflow?\n  {:test (fn [] (is (= (row-overflow? {:char-width 11 :styles {:editor-width 100}} (s/join (repeat 9 \"a\")))\n                       true)))}\n  [{:keys [char-width styles]} row]\n  (-> (count row)\n      (* char-width)\n      (+ char-width)                                        ;; plus the char to be added\n      (> (:editor-width styles))))\n\n(defn remove-row\n  {:test (fn [] (is (= (remove-row {:buffer [\"r1\" \"r2\" \"r3\"]} 1)\n                       {:buffer [\"r1\" \"r3\"]})))}\n  [{:keys [buffer] :as state} row-number]\n  (assoc state :buffer (vec (concat (subvec buffer 0 row-number) (subvec buffer (inc row-number))))))\n\n(defn insert-row-at\n  {:test (fn [] (is (= (insert-row-at {:buffer [\"r1\" \"r2\"]} 1 \"new-row\")\n                       {:buffer [\"r1\" \"new-row\" \"r2\"]})))}\n  [{:keys [buffer] :as state} row-number new-row]\n  (assoc state :buffer (vec (concat (subvec buffer 0 row-number) [new-row] (subvec buffer row-number)))))\n\n(defn cursor-end-of-row?\n  [{:keys [char-width cursor] :as state}]\n  (< (- (editor-width state)\n        (+ char-width (:x cursor)))\n     char-width))\n\n(defn rest-of-row\n  \"Get chars after x, INCLUDING x\"\n  [state row x]\n  (subs row (x->char-pos state x)))\n\n(defn first-of-row\n  \"Get chars up to x, EXCLUDING x\"\n  [state row x]\n  (subs row 0 (x->char-pos state x)))\n\n(defn last-char\n  [row]\n  (last row))\n\n(defn process-char\n  [{:keys [char-width buffer cursor] :as state} key]\n  (let [row (get-active-row state)\n        active-line (y->row state (:y cursor))\n        cursor-x (get-in state [:cursor :x])\n        pos (x->char-pos state cursor-x)\n        new-row (str-insert row key pos)\n        overflow? (row-overflow? state row)]\n    (if overflow?\n      (if (cursor-end-of-row? state)\n        (-> (insert-row-at state (inc active-line) key)\n            inc-cursor-y\n            set-cursor-start\n            inc-cursor-x)\n        (-> (insert-row-at state (inc active-line) (last-char row))\n            (assoc-in [:buffer active-line] (str (first-of-row state row cursor-x) key))\n            inc-cursor-x))\n      (-> (assoc-in state [:buffer active-line] new-row)\n          inc-cursor-x))))\n\n(defn empty-row?\n  [state row-number]\n  (empty? (get-row state row-number)))\n\n;; TODO handle if cursor is first on row and if no more rows above\n(defn process-backspace\n  [{:keys [cursor buffer styles] :as state}]\n  (let [active-line (y->row state (:y cursor))]\n    (cond\n      (empty-row? state active-line)\n      (-> (remove-row state active-line)                    ;; TODO this is broken, cursor jumps to first line\n          (update :active-line #(max 0 (dec (:active-line %))))\n          (assoc-in [:cursor :y] (dec-cursor-y (:y cursor) (:line-height styles)))\n          (assoc-in [:cursor :x] (set-cursor-end-of-row state (:active-line state))))\n      ;(= 0 (:x cursor)) ;; TODO handle remove line and put rest of line into the one above\n      :else\n      (let [pos (x->char-pos state (- (:x cursor) 1))]\n        (->>\n          (remove-char-at (nth buffer active-line) pos)\n          (assoc-in state [:buffer active-line])\n          dec-cursor-x)))))\n\n(defn process-key-down\n  [state {:keys [key]}]\n  (condp re-matches key\n    #\"Enter\" (update state :keys-down conj (keyword key))\n    #\"Shift\" nil\n    #\"Meta\" nil\n    #\"ArrowRight\" nil\n    #\"ArrowLeft\" nil\n    #\"ArrowUp\" nil\n    #\"ArrowDown\" nil\n    #\"Backspace\" (->\n                   (update state :keys-down conj (keyword key))\n                   process-backspace)\n    (-> (update state :keys-down conj (keyword key))\n        (process-char key))\n    ))\n\n(defn process-key-up\n  [state {:keys [key]}]\n  (update state :keys-down disj (keyword key)))\n\n(defn process-key\n  [state {:keys [key-type] :as data}]\n  (condp = key-type\n    :keydown (process-key-down state data)\n    :keyup (process-key-up state data)\n    (js/console.warn \"unable to process key event\" key-type)))\n\n(defn get-dom-el\n  [id]\n  (interop/get-element-by-id id))\n\n(defn get-relative-mouse-cords\n  [js-evt el]\n  (let [{:keys [left top]} (interop/get-bounding-client-rect el)\n        x (interop/mouse-x js-evt)\n        y (interop/mouse-y js-evt)]\n    {:x        (- x left)\n     :y        (- y top)\n     :x-screen x\n     :y-screen y}))\n\n(defn clamp-to-row\n  {:test (fn []\n           (is (= (clamp-to-row 19 18) 0))\n           (is (= (clamp-to-row 19 0) 0))\n           (is (= (clamp-to-row 19 38) 2)))}\n  [row-height y]\n  (-> (/ y row-height)\n      Math/floor\n      int))\n\n(defn in-editor?\n  [{:keys [x y]}]\n  ;; TODO dont deref inside pure fn\n  (and (>= x 0) (<= x (get-in @state-atom [:styles :editor-width]))\n       (>= y 0) (<= y (get-in @state-atom [:styles :editor-height]))))\n\n(defn process-mouse-down\n  [state {:keys [js-evt]}]\n  (let [mouse (->> (get-dom-el \"editor-area\") (get-relative-mouse-cords js-evt))]\n    (when (in-editor? mouse)\n      (-> (assoc-in state [:mouse :start] mouse)\n          (assoc-in [:mouse :is-down] true)\n          (assoc :cursor (clamp-cursor state mouse))\n          (assoc :selections [])))))\n\n(defn process-mouse-up\n  [state {:keys [js-evt]}]\n  (update-in state [:mouse] assoc\n             :end (->> (get-dom-el \"editor-area\") (get-relative-mouse-cords js-evt))\n             :is-down false))\n\n(defn ge-sub\n  [a b]\n  (if (> a b)\n    (- a b)\n    (- b a)))\n\n(defn selection-top-dist\n  [row-num line-height]\n  (* line-height row-num))\n\n(defn selection-x->end\n  \"position of a row from x to the end of that row\"\n  [state row-num x full-width line-height]\n  {:width (clamp-to-chars state row-num (- full-width x))\n   :top   (selection-top-dist row-num line-height)\n   :left  (clamp-to-chars state row-num x)})\n\n(defn selection-zero->x\n  \"position of a row from start of the row to coordinate x\"\n  [state row-num x line-height]\n  {:width (clamp-to-chars state row-num x)\n   :top   (selection-top-dist row-num line-height)\n   :left  0})\n\n(defn selection-zero->end\n  \"position of a fully selected row\"\n  [state line-height row-num]\n  (let [width (get-row-width state row-num)]\n    {:width (if (zero? width) 7.2 width)                    ;; TODO 7.2...\n     :top   (selection-top-dist row-num line-height)\n     :left  0}))\n\n(defn select-rows-between\n  [state a b line-height]\n  (let [fixed-row (y->row state (:y a))\n        moving-row (y->row state (:y b))\n        fixed-row-width (get-row-width state fixed-row)\n        moving-row-width (get-row-width state moving-row)\n        fixed-x (min (:x a) fixed-row-width)\n        moving-x (min (:x b) moving-row-width)]\n    (if (= fixed-row moving-row)                            ;; same row\n      [{:width (clamp-to-chars state fixed-row (min (Math/abs (- fixed-x moving-x)) fixed-row-width))\n        :top   (* fixed-row line-height)\n        :left  (clamp-to-chars state fixed-row (min fixed-x moving-x))}]\n      (concat                                               ;; either drag up or down for different rows\n        (->>\n          (ge-sub fixed-row moving-row)                     ;; n-rows between start and end selection row ;; remove 1 cus of separate handling\n          dec\n          (max 0)                                           ;; can't be < 0, no selections in this case\n          range                                             ;; n-rows to be selected\n          (map #(+ % 1 (min fixed-row moving-row)))         ;; apply correct row-numbers for fully selected rows\n          (map (fn [row-num] (selection-zero->end state line-height row-num)))) ;; map full selection\n        (if (> fixed-row moving-row)\n          [(selection-x->end state moving-row moving-x moving-row-width line-height)\n           (selection-zero->x state fixed-row fixed-x line-height)]\n          [(selection-x->end state fixed-row fixed-x fixed-row-width line-height)\n           (selection-zero->x state moving-row moving-x line-height)])))))\n\n(defn process-mouse-move\n  [state {:keys [js-evt]}]\n  (when (get-in state [:mouse :is-down])\n    (let [mouse (->> (get-dom-el \"editor-area\") (get-relative-mouse-cords js-evt))]\n      (when (in-editor? mouse)\n        (-> (assoc-in state [:mouse :end] mouse)\n            (assoc :cursor (clamp-cursor state mouse))\n            (as-> state (assoc state :selections (select-rows-between\n                                                   state\n                                                   (get-in state [:mouse :start])\n                                                   (get state :cursor)\n                                                   (get-in state [:styles :line-height])))))))))\n\n(defn handle-mouse-event\n  [state {:keys [mouse-type] :as data}]\n  (condp = mouse-type\n    :mousemove (process-mouse-move state data)\n    :mousedown (process-mouse-down state data)\n    :mouseup (process-mouse-up state data)\n    (js/console.warn \"Unable to process mouse event: \" type)))\n\n(defn handle-event!\n  [name data]\n  {:pre [(keyword? name)]}\n  (condp = name\n    :key-pressed (swap! state-atom (fn [state] (if-let [new-state (process-key state data)]\n                                                 new-state\n                                                 state)))\n    :mouse-event (swap! state-atom (fn [state] (if-let [new-state (handle-mouse-event state data)]\n                                                 new-state\n                                                 state)))\n    :measure-char (swap! state-atom assoc :char-width (:char-width data))\n    (js/console.warn \"Unable to handle event\" name data)))\n\n(defn editor\n  []\n  (let [trigger-event handle-event!]\n    (r/create-class\n      {:component-did-mount (fn []\n                              (when-not (:char-width @state-atom)\n                                (trigger-event :measure-char {:char-width (-> (interop/get-element-by-id \"ruler\")\n                                                                              interop/get-bounding-client-rect\n                                                                              :width)}))\n                              (let [chans (async/merge\n                                            [(listen (interop/get-element-by-id \"editor-input\") \"keydown\")\n                                             (listen (interop/get-element-by-id \"editor-input\") \"keyup\")\n                                             (listen interop/document \"mousedown\")\n                                             (listen interop/document \"mouseup\")\n                                             (listen interop/document \"mousemove\")])]\n                                (async/go (loop []\n                                            (let [evt (async/<! chans)\n                                                  type (keyword (.-type evt))]\n                                              (when (contains? #{:mousedown :mouseup :mousemove} type)\n                                                (trigger-event :mouse-event {:mouse-type type :js-evt evt}))\n\n                                              (when (contains? #{:keydown :keyup} type)\n                                                (trigger-event :key-pressed {:key-type type\n                                                                             :key      (.-key evt)}))\n                                              (recur)\n                                              )))))\n       :reagent-render      (fn []\n                              (let [{:keys [buffer selections char-width]} @state-atom]\n                                ;(cljs.pprint/pprint @state-atom)\n                                ;(println (s/split-lines (:uffer @state-atom)))\n                                [:div\n                                 [:div {:style {:margin-bottom \"20px\"}} \"toolbar\"]\n                                 [:textarea {:id          \"editor-input\"\n                                             :on-blur     (fn [] (.focus (interop/get-element-by-id \"editor-input\")))\n                                             :rows        1\n                                             :wrap        \"soft\"\n                                             :spell-check false\n                                             :style       {:width    \"1px\"\n                                                           :position \"absolute\"\n                                                           :height   \"1px\"\n                                                           :opacity  0\n                                                           :border   \"none\"\n                                                           :resize   \"none\"\n                                                           :outline  \"none\"\n                                                           }}]\n                                 [:div {:id         \"editor-area\"\n                                        :tab-index  0\n                                        :on-click   (fn [] (.focus (interop/get-element-by-id \"editor-input\"))) ;; TODO\n                                        :draggable  false\n                                        :userselect \"none\"\n                                        :style      {:position            \"absolute\"\n                                                     :width               (str (get-in @state-atom [:styles :editor-width]) \"px\")\n                                                     :height              (str (get-in @state-atom [:styles :editor-height]) \"px\")\n                                                     :outline             \"none\"\n                                                     ;:white-space         \"pre-wrap\"\n                                                     :-webkit-user-select \"none\"\n                                                     :cursor              \"text\"\n                                                     :line-height         (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                     :font-size           (str (get-in @state-atom [:styles :font-size]) \"px\")\n                                                     :background-color    \"transparent\"\n                                                     :font                \"Monaco\"\n                                                     :font-family         \"monospace\"}}\n                                  [:div {:id         \"active-row\"\n                                         :tab-index  -1\n                                         :draggable  false\n                                         :userselect \"none\"\n                                         :style      {:position            \"absolute\"\n                                                      :background          \"#ecece7\"\n                                                      :width               (str (get-in @state-atom [:styles :editor-width]) \"px\")\n                                                      :outline             \"none\"\n                                                      ;:white-space         \"pre-wrap\"\n                                                      :-webkit-user-select \"none\"\n                                                      :cursor              \"text\"\n                                                      :z-index             -1\n                                                      :top                 (str (* (get-in @state-atom [:styles :line-height]) (y->row @state-atom (get-in @state-atom [:cursor :y]))) \"px\") ;; TODO\n                                                      :height              (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                      :line-height         (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                      :font-family         \"monospace\"\n                                                      :font-size           (str (get-in @state-atom [:styles :font-size]) \"px\")}}]\n                                  (doall (map-indexed (fn [i line] [:div {:key    (str \"row-\" i)\n                                                                          :id     (str \"row-\" i)\n                                                                          :cursor \"text\"}\n                                                                    [:div {:style {:cursor      \"text\"\n                                                                                   :font-family \"monospace\"\n                                                                                   :word-break  \"break-all\"\n                                                                                   :display     \"inline-block\"\n                                                                                   :width       \"100%\"\n                                                                                   }}\n                                                                     line\n                                                                     ]]) buffer))]\n                                 [:div {:id         \"selections\"\n                                        :draggable  false\n                                        :tab-index  -1\n                                        :userselect \"none\"\n                                        :style      {:position            \"absolute\"\n                                                     :z-index             -1\n                                                     :width               (str (get-in @state-atom [:styles :editor-width]) \"px\")\n                                                     :height              (str (get-in @state-atom [:styles :editor-height]) \"px\")\n                                                     :outline             \"none\"\n                                                     :-webkit-user-select \"none\"\n                                                     :cursor              \"text\"\n                                                     :line-height         (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                     }}\n                                  (doall (map-indexed (fn [i {:keys [width top left]}]\n                                                        [:div {:id    (str \"selection-\" i)\n                                                               :key   (str \"selection-\" i)\n                                                               :style {\n                                                                       :background \"#B5D5FF\"\n                                                                       :position   \"absolute\"\n                                                                       :height     (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                                       :width      (str width \"px\")\n                                                                       :top        (str top \"px\")\n                                                                       :left       (str left \"px\")}}]\n                                                        ) selections))\n\n                                  ]\n                                 [:div {:id    \"caret\"\n                                        :style {\n                                                :transform (str \"translate(\" (get-in @state-atom [:cursor :x]) \"px,\" (* (get-in @state-atom [:styles :line-height]) (y->row @state-atom (get-in @state-atom [:cursor :y]))) \"px)\") ;; TODO\n                                                :animation \"typing 3.5s steps(40, end),  blink-caret .75s step-end infinite\"\n                                                :opacity   \"0.3\"\n                                                :display   \"block\"\n                                                :border    \"1px solid black\"\n                                                :position  \"absolute\"\n                                                :cursor    \"text\"\n                                                :height    (str (get-in @state-atom [:styles :line-height]) \"px\")\n                                                :width     \"1px\"}}]\n                                 (when-not char-width\n                                   [:div {:id    \"ruler\"\n                                          :style {:visibility  \"hidden\"\n                                                  :display     \"inline-block\"\n                                                  :white-space \"nowrap\"\n                                                  :font-family \"monospace\"\n                                                  :font-size   (str (get-in @state-atom [:styles :font-size]) \"px\")\n                                                  }\n                                          } \"!\"])\n\n                                 ]))})))\n"]}