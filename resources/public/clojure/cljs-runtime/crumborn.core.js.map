{"version":3,"sources":["crumborn/core.cljs"],"mappings":"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","names":["js/goog.define","crumborn.core/env","crumborn.core/ws-url","crumborn.core/get-ws-url","crumborn.core/get-env","crumborn.core/is-release?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","crumborn.core/is-dev?","crumborn.core/debounce","f","interval","dbnc","js/goog.async.Debouncer","args","cljs.core/to-array","var_args","G__26109","crumborn.core/get-page-and-slug","js/Error","event","vec__26132","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","page","slug","crumborn.interop.get_hash.cljs$core$IFn$_invoke$arity$1","clojure.string/replace","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","crumborn.core.get_page_and_slug.cljs$core$IFn$_invoke$arity$1","cljs.core/clj->js","crumborn.interop/get-window","crumborn.core/get-identitiy","state","crumborn.core/authenticated?","crumborn.core/loading?","crumborn.core/page-is-create-post?","crumborn.core.get_page_and_slug.cljs$core$IFn$_invoke$arity$0","crumborn.core/active-page-is?","crumborn.core/get-uuid","js/btoa","cljs.core/random-uuid","crumborn.core/set-loading","value","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","crumborn.core/new-page?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","crumborn.core/new-slug?","%","crumborn.core/get-page","pages","page-id","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1","cljs.core/Keyword","cljs.core/map?","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","crumborn.core/valid-edn?","maybe-edn","e26182","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","_","crumborn.core/map->pretty-string","m","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__26200","vec__26201","acc-str","k","v","crumborn.core/has-fact?","path","cljs.core/boolean","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","crumborn.core/space->space","s","crumborn.core/space->dash","crumborn.core/dash->space","crumborn.core/get-post","app-state","posts","cljs.core/vals","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__26220","map__26221","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","title","cljs.core/first","crumborn.core/assocs-in","values__8921__auto__","cljs.core/List","result__8922__auto__","cljs.test/do-report","cljs.core/cons","t__8952__auto__","e26242","cljs.core/=","paths","data","cljs.core/assoc-in","p__26258","map__26259","crumborn.core/change-fact","fact"],"sourcesContent":["(ns crumborn.core\n  (:require [clojure.string :as str]\n            [clojure.test :as t]\n            [crumborn.interop :as interop])\n  (:import [goog.async Debouncer]))\n\n(goog-define env \"none\")\n(goog-define ws-url \"none\")\n\n(defn get-ws-url [] ws-url)\n(defn get-env [] env)\n\n(defn is-release? [] (= (get-env) \"release\"))\n(defn is-dev? [] (= (get-env) \"dev\"))\n\n(defn debounce [f interval]\n  (let [dbnc (Debouncer. f interval)]\n    (fn [& args] (.apply (.-fire dbnc) dbnc (to-array args)))))\n\n(defn get-page-and-slug\n  ([event]\n   (let [[page slug] (-> (interop/get-hash event)\n                         (str/replace #\"#\" \"\")\n                         (str/split #\"/\"))]\n     {:page (when-not (empty? page) (keyword page))\n      :slug (when-not (empty? slug) slug)}))\n  ([]\n   (get-page-and-slug (clj->js {:target (interop/get-window)}))))\n\n(defn get-identitiy\n  [state]\n  (:identity state))\n\n(defn authenticated?\n  [state]\n  (some? (get-identitiy state)))\n\n(defn loading?\n  [state]\n  (:loading state))\n\n(defn page-is-create-post?\n  []\n  (= :create-post (:page (get-page-and-slug))))\n\n(defn active-page-is?\n  [state page]\n  (= (:active-page state) page))\n\n(defn get-uuid\n  []\n  (js/btoa (str (random-uuid))))\n\n\n(defn set-loading\n  [state value]\n  (assoc state :loading value))\n\n(defn new-page?\n  [state page]\n  (and (-> page nil? not) (not= (:active-page state) page)))\n\n(defn new-slug?\n  [state slug]\n  (and (-> slug nil? not) (not= (:active-slug state) slug)))\n\n(defn get-page\n  \"Get a page, if it not defined in pages, default to front-page\"\n  [pages page-id]\n  {:pre  [(= (keyword? page-id))]\n   :post [(map? %)]}\n  (if (contains? pages page-id)\n    (get pages page-id)\n    (get pages :front-page)))\n\n(defn valid-edn?\n  [maybe-edn]\n  (try\n    (cljs.reader/read-string maybe-edn)                     ;; TODO is this good to use\n    (catch js/Error _\n      nil)))\n\n(defn map->pretty-string\n  [m]\n  (str\n    (reduce (fn [acc-str [k v]]\n              (str\n                acc-str\n                k\n                \" \"\n                (cond\n                  (= v \"\") \"\\\"\\\"\"\n                  (string? v) (str \"\\\"\" v \"\\\"\")\n                  :else v)\n                \"\\n \")) \"{\\n \" m)\n    \"}\"))\n\n(defn has-fact?\n  [state path]\n  (boolean (get-in state path)))\n\n(defn space->space\n  [s]\n  (clojure.string/replace s #\"%20\" \" \"))\n\n(defn space->dash\n  [s]\n  (->\n    (clojure.string/replace s #\"%20\" \"-\")\n    (clojure.string/replace #\" \" \"-\")))\n\n(defn dash->space\n  [s]\n  (clojure.string/replace s #\"-\" \" \"))\n\n(defn get-post\n  \"Get a post by name from the state\"\n  [app-state slug]\n  (let [posts (vals (get-in app-state [:pages :posts :posts]))]\n    (when (some? posts)\n      (->\n        (filter (fn [{:keys [title]}]\n                  (= title (dash->space slug))) posts)\n        first))))\n\n(defn assocs-in\n  {:test (fn []\n           (t/is (= (assocs-in {} [[:a :b] [:c :d]] \"data\")\n                    {:a {:b \"data\"}\n                     :c {:d \"data\"}})))}\n  [m paths data]\n  (reduce (fn [m path] (assoc-in m path data)) m paths))\n\n(defn change-fact\n  [state {:keys [paths fact]}]\n  (assocs-in state paths fact))\n\n"]}