{"version":3,"sources":["crumborn/websocket.cljs"],"mappings":";;;;AAIA,AAAA,AAAMA,AAAiBC;AAAvB,AAAgC,AAAA,AAAMA;;AACtC,AAAA,AAAOC,AAAaD,AAAQE;AAA5B,AAA+B,AAACC,AAAE,AAACJ,AAAgBC,AAASE;;AAE5D,AAAA,AAAME,AAAuBJ;AAA7B,AAAsC,AAAMA;AAAN,AAAc,AAAA,AAACC,AAAYD;;AAA3B;;;AACtC,AAAA,AAAMK,AAAiBL;AAAvB,AAAgC,AAAMA;AAAN,AAAc,AAAA,AAACC,AAAYD;;AAA3B;;;AAChC,AAAA,AAAMM,AAAoBN;AAA1B,AAAmC,AAAMA;AAAN,AAAc,AAAA,AAACC,AAAYD;;AAA3B;;;AACnC,AAAA,AAAMO,AAAmBP;AAAzB,AAAkC,AAAMA;AAAN,AAAc,AAAA,AAACC,AAAYD;;AAA3B;;;AAElC;;;AAAA,AAAMQ,AAEHC;AAFH,AAGE,AAAKC;AAAL,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAES,AAACC,AAAgB,AAAQF;AAFlC,AAAA,AAAAC,AAAAA,AAACF,AAAAA,AAAAA;;;AAIL;;;AAAA,AAAAI,AAAMM,AAEkBT;AAFxB,AAAA,AAAAI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEWd;AAFX,AAAAkB,AAAAJ,AAAA,AAEmBM;AAFnB,AAGE,AAAI,AAACf,AAAgBL;AACnB,AAAOA,AAAQ,AAAA,AAACqB,AAAMX,AAAQU;;AAC9B,AAAO,AAAAE,AAAA;;;AAEX,AAAA,AAAMC,AAASC,AAAKxB,AAAQS;AAA5B,AACE,AAAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AACA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2D5B;AAA3D,AAAA,AAAA4B,AAAAA,AAACnB,AAAAA,AAAAA;;AACH,AAAA,AAAMoB;AAAN,AAAA;;AACA,AAAA,AAAMC;AAAN,AAAA;;AAEA;;;AAAA,AAAMC,AAEHC,AAAIvB;AAFP,AAGE,AAAAwB,AAAc,AAAAE,AAAeH;AAA7B,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AACE,AAAM,AAAaA,AAAM,AAAC1B,AAAYC;;AACtC,AAAM,AAAUyB,AAAM,AAAKV;AAAL,AAAW,AAACD,AAAQC,AAAKU,AAAKzB;;;AACpD,AAAM,AAAWyB,AAAML;;AACvB,AAAM,AAAWK,AAAMJ;;AAEzB,AAAO,AAAAR,AAAA","names":["crumborn.websocket/get-ready-state","channel","crumborn.websocket/ready-state","n","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","crumborn.websocket/socket-is-connecting?","crumborn.websocket/socket-is-open?","crumborn.websocket/socket-is-closing?","crumborn.websocket/socket-is-closed?","crumborn.websocket/receive-msg","trigger-event","msg","G__41763","clojure.edn.read_string.cljs$core$IFn$_invoke$arity$1","p__41764","map__41765","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","crumborn.websocket/send-msg!","id","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/Error","crumborn.websocket/on-open","data","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11","taoensso.timbre/*config*","cljs.core/Delay","G__41777","crumborn.websocket/on-close","crumborn.websocket/on-error","crumborn.websocket/make-websocket!","url","temp__5733__auto__","chan","js/WebSocket"],"sourcesContent":["(ns crumborn.websocket\n  (:require [taoensso.timbre :as log]\n            [clojure.edn :as edn]))\n\n(defn get-ready-state [channel] (aget channel \"readyState\"))\n(defn- ready-state [channel n] (= (get-ready-state channel) n))\n\n(defn socket-is-connecting? [channel] (when channel (ready-state channel 0)))\n(defn socket-is-open? [channel] (when channel (ready-state channel 1)))\n(defn socket-is-closing? [channel] (when channel (ready-state channel 2)))\n(defn socket-is-closed? [channel] (when channel (ready-state channel 3)))\n\n(defn receive-msg\n  \"Receive and trigger event from the websocket.\"\n  [trigger-event]\n  (fn [msg]\n    (trigger-event\n      {:name :channel-received-msg\n       :data (edn/read-string (.-data msg))})))\n\n(defn send-msg!\n  \"Send message through the websocket, assoc an id to the data.\"\n  [{:keys [channel id]} msg]\n  (if (socket-is-open? channel)\n    (.send channel (assoc msg :id id))\n    (throw (js/Error. \"Socket is not open\"))))\n\n(defn on-open [data channel trigger-event]\n  (log/debug \" Websocket established\")\n  (trigger-event {:name :channel-initialized :data {:channel channel}}))\n(defn on-close [] nil)\n(defn on-error [] nil)\n\n(defn make-websocket!\n  \"Create a websocket with url, triggers event on messages\"\n  [url trigger-event]\n  (if-let [chan (js/WebSocket. url)]\n    (do\n      (set! (.-onmessage chan) (receive-msg trigger-event))\n      (set! (.-onopen chan) (fn [data] (on-open data chan trigger-event)))\n      (set! (.-onclose chan) on-close)\n      (set! (.-onerror chan) on-error)\n      )\n    (throw (js/Error. \" Unable to establish websocket \"))))\n"]}